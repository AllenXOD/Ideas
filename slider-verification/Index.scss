@import "../common.scss";

body {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;

  .captcha {
    $width: 400px;
    $height: 260px;
    $puzzle-width: 80px;
    $puzzle-height: 80px;


    width: $width;
    height: $height;
    display: block;
    border-radius: 4px;
    background-image: url(https://img2.baidu.com/it/u=2367332086,2984327766&fm=253&fmt=auto&app=138&f=JPEG?w=889&h=500);
    background-size: cover;
    background-position: center;
    position: relative;
    box-shadow: 0 2px 4px rgba($color: #000, $alpha: 0.3);

    &::after,
    &::before {
      content: "";
      position: absolute;
      display: block;
      width: inherit;
      height: inherit;
      background-size: inherit;
      background-position: inherit;
      background-image: inherit;

      clip-path: inset(
        calc(($height - $puzzle-height) / 2)
        $puzzle-width
        calc(($height - $puzzle-height) / 2)
        calc($width - $puzzle-width * 2)
      );
      -webkit-clip-path: inset(
        calc(($height - $puzzle-height) / 2)
        $puzzle-width
        calc(($height - $puzzle-height) / 2)
        calc($width - $puzzle-width * 2)
      );
    }

    &::after {
      transform: translateX(
        clamp(
          calc($width * -1),
          calc($width * -1 + var(--moved)),
          $puzzle-width
        )
      );
      transition: all 250ms ease-in-out;
    }
    &::before {
      background-color: rgba($color: #000, $alpha: 0.6);
      background-blend-mode: multiply;
    }

    &:active::after {
      transition: none;
    }

    &.passed {
      &::after,
      &::before,
      .handle {
        opacity: 0;
      }
    }

    .handle {
      width: calc($width + $puzzle-width * 2);
      height: 30px;
      border-radius: 18px;
      background-color: #eee;
      position: absolute;
      bottom: -50px;
      left: calc($puzzle-width * 2 * -1);
      box-shadow: inset 0 0 12px rgba($color: #000, $alpha: 0.2);
      border: 3px solid #ccc;

      span {
        display: block;
        width: $puzzle-width;
        height: 100%;
        border-radius: 18px;
        background-color: #fff;
        position: absolute;
        cursor: move;
        transition: all 250ms ease-in-out;
        box-shadow: inset 0 0 6px rgba($color: #000, $alpha: 0.25), 0 2px 4px rgba($color: #000, $alpha: 0.3);
        transform: translateX(
          clamp(0px, var(--moved), calc($width + $puzzle-width))
        );

        &:active {
          transition: none;
        }
      }
    }
  }
}